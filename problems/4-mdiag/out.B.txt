
 Problem B1: Test Jacobi cycle time 

Symmetric random test matrix A of size 50
Average Jacobi diagonalisation time
time_avg = 10.8704133333333 ms

Perform calculation for different matrix sizes
exec time fit params 0.00554632536505959 8.90258520841362E-05
See PlotB1.svg for execution time calculation and a+b*x^3 fit

 Problem B2

Random symmetric matrix A with size 8
Perform eigenvalue by eigenvalue calculation for first 4 values
Found eigenvalues =  -1.66  -0.731  -0.047  -0.00286 
V.T*A*V - D = 
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  1.046548  0.889699  1.304204
  0.000000  0.000000  0.000000  0.000000  1.046548  0.000000  0.375860  0.386569
  0.000000  0.000000  0.000000  0.000000  0.889699  0.375860  0.000000  0.307882
  0.000000  0.000000  0.000000  0.000000  1.304204  0.386569  0.307882  0.000000

 Total rotations used = 1474

 Matrix copy used, after value by value operations = 
  0.702899  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.433516  0.641559  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.429188  0.643693  0.517537  0.000000  0.000000  0.000000  0.000000  0.000000
  0.196729  0.213719  0.225592  0.280850  0.000000  0.000000  0.000000  0.000000
  0.983102  0.678093  0.905194  0.555645  0.480526  1.046548  0.889699  1.304204
  0.924895  0.016699  0.716896  0.460073  0.954818  0.356174  0.375860  0.386569
  0.921173  0.401164  0.960744  0.950111  0.088733  0.662720  0.056580  0.307882
  0.882819  0.555723  0.627469  0.482053  0.340304  0.430141  0.107910  0.646236

Similar calculation with cyclic sweeps
Found eigenvalues =      -1.66     -0.731     -0.047   -0.00286      0.372      0.511      0.731       4.51 
V.T*A*V - D = 
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000

 Total rotations used = 127

 Matrix copy used, after cyclic sweeps = 
  0.702899  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.433516  0.641559  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000
  0.429188  0.643693  0.517537  0.000000  0.000000  0.000000  0.000000  0.000000
  0.196729  0.213719  0.225592  0.280850  0.000000  0.000000  0.000000  0.000000
  0.983102  0.678093  0.905194  0.555645  0.480526  0.000000  0.000000  0.000000
  0.924895  0.016699  0.716896  0.460073  0.954818  0.356174  0.000000  0.000000
  0.921173  0.401164  0.960744  0.950111  0.088733  0.662720  0.056580  0.000000
  0.882819  0.555723  0.627469  0.482053  0.340304  0.430141  0.107910  0.646236

 Problem B3

See PlotB3r.svg and PlotB3t.svg for results

 Problem B4

See PlotB4r.svg and PlotB4t.svg for results

 Problem B5

Random symmetric matrix A with size 5
We find all eigenvalues with cyclic routine
Eigenvalues found by cyclic routine, low to high    -0.941     -0.335    -0.0506      0.549       2.33 

Now we use the value-by-value routine to calculate eigenvalues from last to first
We do this by changing the calculation of rotation angle theta to 0.5*Atan2(-Apq, App-Aqq)

Eigenvalues value-by-value, in order of calculation      2.33      0.549    -0.0506     -0.335     -0.941 
